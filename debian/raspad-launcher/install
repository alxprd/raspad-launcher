#!/usr/bin/env python3
import os, sys
import time
import shutil

errors = []

avaiable_options = ['-h', '--help', '--no-dep']

usage = '''
Usage:
    sudo python3 install.py [option]

Options:
               --no-dep     Do not download dependencies
    -h         --help       Show this help text and exit
'''

DEPENDENCIES = [
    "qml-module-qt-labs-folderlistmodel",
    "qml-module-qtquick-layouts",
    "qml-module-qtquick-controls2",
    "qml-module-qtquick-window2",
    "qml-module-qtquick2",
    "qml-module-qtgraphicaleffects",
    "libqt5quickcontrols2-5",
    "libqt5quicktemplates2-5",
    "qml-module-qtquick-templates2",
]

def install():
    options = []
    if len(sys.argv) > 1:
        options = sys.argv[1:]
        for o in options:
            if o not in avaiable_options:
                print("Option {} is not found.".format(o))
                print(usage)
                quit()
    if "-h" in options or "--help" in options:
        print(usage)
        quit()
    print("RasPad Launcher install process starts")

    if "--no-dep" not in options:
        do(msg="Update apt",
            cmd='run_command("sudo apt update")')
        dep = " ".join(DEPENDENCIES)
        do(msg="Install dependencies",
            cmd='run_command("sudo apt install %s -y")' % dep)

    if os.path.isdir('/usr/local/qt5pi'):
        print("Uninstall Old Qt runtime")
        do(msg="Remove Qt Runtime",
            cmd='run_command("rm -rf /usr/local/qt5pi")')

    print("Install RasPad Launcher")
    do(msg="Copy raspad-faq.desktop",
        cmd='run_command("cp ./applications/raspad-faq.desktop /usr/share/applications/")')
    do(msg="Copy raspad-launcher.desktop",
        cmd='run_command("cp ./applications/raspad-launcher.desktop /usr/share/applications/")')
    do(msg="Copy icon",
        cmd='run_command("cp ./icons/raspad.png /usr/share/icons/")')
    do(msg="Copy raspad-launcher",
        cmd='run_command("cp ./bin/raspad-launcher /usr/local/bin/")')
    do(msg="Copy raspad-launcher-helper",
        cmd='run_command("cp ./bin/raspad-launcher-helper /usr/local/bin/")')
    do(msg="Add excute permission",
        cmd='run_command("chmod +x /usr/local/bin/raspad-launcher /usr/local/bin/raspad-launcher-helper")')
    if os.path.isdir("/home/pi/.config/lxpanel/LXDE-pi/panels/panel"):
        do(msg="backup panel setting",
            cmd='run_command("cp /home/pi/.config/lxpanel/LXDE-pi/panels/panel /home/pi/.config/lxpanel/LXDE-pi/panels/panel.bak")')
    else:
        do(msg="cp panel settings",
            cmd='run_command("sudo cp -r /etc/xdg/lxpanel /home/pi/.config/")')
        do(msg="change panel setting owner",
            cmd='run_command("sudo chown -R pi:pi /home/pi/.config/lxpanel")')
    do(msg="replace menu icon",
        cmd='run_command("cp ./panel /home/pi/.config/lxpanel/LXDE-pi/panels/panel")')
    do(msg="Reflash panel",
        cmd='run_command("export DISPLAY=:0.0 && lxpanelctl restart")')

    # print("Install Onboard Keyboard")
    # do(msg="install onboard",
    #     cmd='run_command("sudo apt install onboard at-spi2-core -y")')
    # do(msg="install onboard",
    #     cmd='run_command("sudo apt install onboard -y")')
    # sudo apt install onboard

    print("Install screen auto rotator")
    do(msg="Clone package",
        cmd='run_command("git clone --depth=1 https://github.com/raspad-tablet/raspad-auto-rotator")')
    os.chdir("raspad-auto-rotator")
    do(msg="Install raspad-auto-rotator",
        cmd='run_command("python3 install.py --no-reboot")')
    os.chdir("..")

    if len(errors) == 0:
        print("Finished")
        select = input("Installation needs to reboot. Do you want to reboot right now? (y/N): ")
        if select.lower() == "y":
            print("Reboot!")
            time.sleep(1)
            run_command("reboot")
        else:
            print("Canceled")
    else:
        print("\n\nError happened in install process:")
        for error in errors:
            print(error)
        print("Try to fix it yourself, or contact service@sunfounder.com with this message")
        sys.exit(1)

def cleanup():
    shutil.rmtree("raspad-auto-rotator")

class Modules(object):
    ''' 
        To setup /etc/modules
    '''

    def __init__(self, file="/etc/modules"):
        self.file = file
        with open(self.file, 'r') as f:
            self.configs = f.read()
        self.configs = self.configs.split('\n')

    def remove(self, expected):
        for config in self.configs:
            if expected in config:
                self.configs.remove(config)
        return self.write_file()

    def set(self, name):
        have_excepted = False
        for i in range(len(self.configs)):
            config = self.configs[i]
            if name in config:
                have_excepted = True
                tmp = name
                self.configs[i] = tmp
                break

        if not have_excepted:
            tmp = name
            self.configs.append(tmp)
        return self.write_file()

    def write_file(self):
        try:
            config = '\n'.join(self.configs)
            # print(config)
            with open(self.file, 'w') as f:
                f.write(config)
            return 0, config
        except Exception as e:
            return -1, e

class Config(object):
    ''' 
        To setup /boot/config.txt
    '''
    def __init__(self, file="/boot/config.txt"):
        self.file = file
        with open(self.file, 'r') as f:
            self.configs = f.read()
        self.configs = self.configs.split('\n')

    def remove(self, expected):
        for config in self.configs:
            if expected in config:
                self.configs.remove(config)
        return self.write_file()

    def set(self, name, value=None):
        have_excepted = False
        for i in range(len(self.configs)):
            config = self.configs[i]
            if name in config:
                have_excepted = True
                tmp = name
                if value != None:
                    tmp += '=' + value
                self.configs[i] = tmp
                break

        if not have_excepted:
            tmp = name
            if value != None:
                tmp += '=' + value
            self.configs.append(tmp)
        return self.write_file()

    def write_file(self):
        try:
            config = '\n'.join(self.configs)
            # print(config)
            with open(self.file, 'w') as f:
                f.write(config)
            return 0, config
        except Exception as e:
            return -1, e

class Cmdline(object):
    ''' 
        To setup /boot/cmdline.txt
    '''
    def __init__(self, file="/boot/cmdline.txt"):
        self.file = file
        with open(self.file, 'r') as f:
            cmdline = f.read()
        self.cmdline = cmdline.strip()
        self.cmds = self.cmdline.split(' ')

    def remove(self, expected):
        for cmd in self.cmds:
            if expected in cmd:
                self.cmds.remove(cmd)
        return self.write_file()

    def write_file(self):
        try:
            cmdline = ' '.join(self.cmds)
            # print(cmdline)
            with open(self.file, 'w') as f:
                f.write(cmdline)
            return 0, cmdline
        except Exception as e:
            return -1, e

def run_command(cmd=""):
    import subprocess
    p = subprocess.Popen(
        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    result = p.stdout.read().decode('utf-8')
    status = p.poll()
    # print(result)
    # print(status)
    return status, result

def colored(text, color):
    color = color.lower()
    colors = {
        "grey": "\033[1;30m%s\033[0m",
        "red": "\033[1;31m%s\033[0m",
        "green": "\033[1;32m%s\033[0m",
        "yellow": "\033[1;33m%s\033[0m",
        "blue": "\033[1;34m%s\033[0m",
        "purple": "\033[1;35m%s\033[0m",
        "cyan": "\033[1;36m%s\033[0m",
        "white": "\033[1;37m%s\033[0m",
    }
    return colors[color] % text

def do(msg="", cmd=""):
    print("[    ] %s..." % (msg), end='', flush=True)
    status, result = eval(cmd)
    # print(status, result)
    if status == 0 or status == None or result == "":
        print('\r[ %s ]' % colored("OK", "green"))
        return True
    else:
        print('\r[%s]' % colored("Fail", "red"))
        errors.append("%s error:\n  Status:%s\n  Error:%s" %
                      (msg, status, result))
        return False

def check_sudo():
    if os.geteuid() != 0:
        sys.exit("You need root permissions to do this!")

if __name__ == "__main__":
    check_sudo()
    try:
        install()
    except KeyboardInterrupt:
        print("Canceled.")
    finally:
        cleanup()

# if __name__ == "__main__":
#     test()
